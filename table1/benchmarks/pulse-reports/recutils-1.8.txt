#0
lib/gl_array_list.c:462: error: Uninitialized Value
  `_.i` is read without initialization.
  460. #endif
  461. 
  462.   return result;
         ^
  463. }
  464. 

#1
lib/read-file.c:102: error: Use After Free
  accessing memory that was invalidated by call to `free()` on line 97.
  100.               }
  101. 
  102.             buf[size] = '\0';
                   ^
  103.             *length = size;
  104.             return buf;

#2
lib/read-file.c:131: error: Use After Free
  accessing memory that was invalidated by call to `free()` on line 121.
  129.       }
  130. 
  131.     free (buf);
           ^
  132.     errno = save_errno;
  133.     return NULL;

#3
src/rec-db.c:106: error: Null Dereference
  `new` could be null (last assigned on line 89) and is dereferenced.
  104.          database.  */
  105. 
  106.       new->aggregates = rec_aggregate_reg_new ();
             ^
  107.       if (!new->aggregates)
  108.         {

#4
src/rec-db.c:960: error: Memory Leak
  Memory dynamically allocated by `malloc`, indirectly via call to `rec_db_add_random_indexes()` on line 850 is not freed after the last access at line 960, column 1.
  958. 
  959.   return true;
  960. }
       ^
  961. 
  962. rec_aggregate_reg_t

#5
src/rec-db.c:1220: error: Null Dereference
  `fex_elem` could be null (from the call to `rec_fex_get()` on line 1219) and is dereferenced in call to `rec_fex_elem_field_name()`.
  1218.  
  1219.   fex_elem = rec_fex_get (fex, 0);
  1220.   field_name = rec_fex_elem_field_name (fex_elem);
                       ^
  1221.   min = rec_fex_elem_min (fex_elem);
  1222.   max = rec_fex_elem_max (fex_elem);

#6
src/rec-record.c:439: error: Null Dereference
  `rec_write_field_str()` could be null (from the call to `rec_write_field_str()` on line 439) and is dereferenced in call to `rec_buf_puts()`.
  437.       if (rec_mset_elem_type (elem) == MSET_FIELD)
  438.         {
  439.           rec_buf_puts (rec_write_field_str ((rec_field_t) data,
                 ^
  440.                                              REC_WRITER_NORMAL),
  441.                         buf);

#7
src/rec-record.c:447: error: Null Dereference
  `rec_write_comment_str()` could be null (from the call to `rec_write_comment_str()` on line 447) and is dereferenced in call to `rec_buf_puts()`.
  445.         {
  446.           /* Comment.  */
  447.           rec_buf_puts (rec_write_comment_str (rec_comment_text ((rec_comment_t) data),
                 ^
  448.                                                REC_WRITER_NORMAL),
  449.                         buf);

#8
src/rec-record.c:673: error: Null Dereference
  `to_remove` could be null (last assigned on line 663) and is dereferenced.
  671.   while (rec_mset_iterator_next (&iter1, MSET_FIELD, (const void **) &field1, NULL))
  672.     {
  673.       if (!to_remove[i])
                  ^
  674.         {
  675.           /* Mark any other occurrence of this field having the same

#9
src/rec-sex-parser.c:68: error: Null Dereference
  `new->scanner` could be null (from the call to `sexlex_init()` on line 67) and is dereferenced in call to `sexset_extra()`.
  66.       /* Initialize the sexy scanner.  */
  67.       sexlex_init (&(new->scanner));
  68.       sexset_extra (new, new->scanner);
            ^
  69.     }
  70. 

#10
src/rec-sex-tab.c:1774: error: Memory Leak
  Memory dynamically allocated by `malloc`, indirectly via call to `sexlex()` on line 1284 is not freed after the last access at line 1774, column 1.
  1772. #endif
  1773.   return yyresult;
  1774. }
        ^
  1775. #line 174 "../../src/rec-sex-tab.y" /* yacc.c:1906  */
  1776. 

#11
src/rec-sex.c:84: error: Null Dereference
  `new->parser` could be null (from the call to `rec_sex_parser_new()` on line 83) and is dereferenced in call to `rec_sex_parser_set_case_insensitive()`.
  82.       /* Initialize a new parser.  */
  83.       new->parser = rec_sex_parser_new ();
  84.       rec_sex_parser_set_case_insensitive (new->parser,
            ^
  85.                                            case_insensitive);
  86. 

#12
utils/csv2rec.c:206: error: Null Dereference
  `str` could be null (from the call to `xmalloc()` on line 204) and is dereferenced.
  204.   str = xmalloc (len + 1);
  205.   memcpy (str, s, len);
  206.   str[len] = '\0';
         ^
  207. 
  208.   if (ctx->header_p)

#13
utils/rec2csv.c:270: error: Null Dereference
  `fields` could be null (from the call to `rec_fex_new()` on line 260) and is dereferenced in call to `rec_fex_member_p()`.
  268.           field_index = rec_record_get_field_index_by_name (record, field);
  269.           
  270.           if (!rec_fex_member_p (fields,
                      ^
  271.                                  rec_field_name (field),
  272.                                  field_index, field_index))

#14
utils/recinf.c:193: error: Null Dereference
  `parser` could be null (from the call to `rec_parser_new()` on line 130) and is dereferenced in call to `rec_parser_error()`.
  191.     }
  192.   
  193.   if (rec_parser_error (parser))
             ^
  194.     {
  195.       rec_parser_perror (parser, file_name);

#15
utils/recset.c:355: error: Null Dereference
  The call to `recutl_read_db_from_file` in turn calls `recutl_parse_db_from_file` and may trigger the following issue: `parser` could be null (from the call to `recutl_read_db_from_file()` on line 245) and is dereferenced in call to `recutl_read_db_from_file()`.
  353.   recset_parse_args (argc, argv);
  354. 
  355.   db = recutl_read_db_from_file (recset_file);
              ^
  356.   if (!db)
  357.     {

#16
utils/recutl.c:246: error: Null Dereference
  `parser` could be null (from the call to `rec_parser_new()` on line 245) and is dereferenced in call to `rec_parse_rset()`.
  244. 
  245.   parser = rec_parser_new (in, file_name);
  246.   while (rec_parse_rset (parser, &rset))
                ^
  247.     {
  248.       char *rset_type;

Found 17 issues
                      Issue Type(ISSUED_TYPE_ID): #
           Null Dereference(NULLPTR_DEREFERENCE): 12
                  Use After Free(USE_AFTER_FREE): 2
                      Memory Leak(MEMORY_LEAK_C): 2
  Uninitialized Value(PULSE_UNINITIALIZED_VALUE): 1
