#!/usr/bin/python3
#
# lxc-device: Add devices to a running container
#
# This python implementation is based on the work done in the original
# shell implementation done by Serge Hallyn in Ubuntu (and other contributors)
#
# (C) Copyright Canonical Ltd. 2012
#
# Authors:
# St√©phane Graber <stgraber@ubuntu.com>
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

# NOTE: To remove once the API is stabilized
import warnings
warnings.filterwarnings("ignore", "The python-lxc API isn't yet stable")

import argparse
import gettext
import lxc
import sys

_ = gettext.gettext
gettext.textdomain("lxc-device")

# Begin parsing the command line
parser = argparse.ArgumentParser(description=_("LXC: Manage devices"),
                                 formatter_class=argparse.RawTextHelpFormatter)

parser.add_argument("-n", dest="container", metavar="CONTAINER",
                    help=_("Container to add the device to"), required=True)

parser.add_argument("--add", action="append", default=[], metavar="DEVICE",
                    help=_("Add a device"), required=True)

args = parser.parse_args()

container = lxc.Container(args.container)
if not container.running:
    print("The container must be running.")
    sys.exit(1)

for device in args.add:
    container.add_device(device)
    print("Added '%s' to '%s'." % (device, container.name))
